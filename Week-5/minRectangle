;(define (reduce op null-value list)
 ;   (if (null? list) 
  ;    null-value
   ;   (op (car list) (reduce op null-value (cdr list)))))
(define (min-rect-span points)
      (define (get-xs points)
	(map car points))
      (define (get-ys points)
	(map cadr points))
      
      (define (get-min-x xs)
	(fold-right  min (car xs) xs))
      
      (define (get-max-x xs)
	(fold-left max (car xs) xs))
      
      (let ((min-x (get-min (get-xs points)))
	    (max-x (get-max (get-xs points)))
	    (min-y (get-min (get-ys points)))
	    (max-y (get-max (get-ys points))))
	   
      '((min-x min-y) (max-x max-y))))
