(define (make-rat numer denom) (cons numer denom))
(define (get-num rat) (car rat))
(define (get-denom rat) (cdr rat))
(define (sum-rat rat1 rat2) 
      (cons (+ (* (get-num rat1) (get-denom rat2)) 
	             (* (get-num rat2) (get-denom rat1)))
	           (* (get-denom rat1) (get-denom rat2))))
(define (mul-rat rat1 rat2) 
      (cons (* (get-num rat1) (get-num rat2))
	          (* (get-denom rat1) (get-denom rat2))))
(define (sub-rat rat1 rat2) 
      (cons (- (* (get-num rat1) (get-denom rat2)) 
	             (* (get-num rat2) (get-denom rat1)))
	           (* (get-denom rat1) (get-denom rat2))))
(define (div-rat rat1 rat2) 
      (cons (* (get-num rat1) (get-denom rat2))
	           (* (get-denom rat1) (get-num rat2))))
(define (gcd a b)
	  (if (= 0 b) a
	     (gcd b (remainder a b))))
(define (simplify-rat rat)
      (cons (/ (car rat) (gcd (car rat) (cdr rat)))
	          (/ (cdr rat) (gcd (car rat) (cdr rat)))))
(define (len a) (if (null? a) 0 (+ (len (cdr a)) 1)))
(define (member? x listA) 
      (if (null? listA) #f
	  (if (= (car listA) x) #t
		(member? x (cdr listA)))))
(define (expt n k)
      (if (= k 0) 1
	  (* n (expt n (- k 1)))))
(define (list-to-num listA)
      (if (null? listA) 0
	  (+ (* (car listA) (expt 10 (-(len listA) 1))) (list-to-num (cdr listA)))))
